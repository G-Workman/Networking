Stream socket
	Normally used with TCP, SCTP, and Bluetooth.
	A stream socket provides a connection-oriented and sequenced flow of data which has methods for establishment and
	teardown of connections as well as error detection.
Datagram socket
	Normally used with UDP.
	A datagram socket is connection-less by nature. 
	Sockets built this way can send and receive data, but there is no mechanism to retransmit data if a packet is dropped.
Raw socket
	A raw socket allows for the direct sending and receiving of IP packets without automatic protocol-specific transport layer formatting, 
		meaning that all headers are typically included in the packet and not removed when moving up the network stack.
	Raw sockets are used in user applications such as nmap, tcpdump, and wireshark when using elevated privilege levels.
	Nmap needs to open raw sockets when attempting to set specific flags for performing certain scans.
	Tcpdump requires raw sockets in order to receive each packet, in its entirety, for total packet analysis.
User Space Sockets
	Stream Sockets
	Datagram Sockets
Kernel Space Sockets
	Raw Sockets
User Space Sockets
	The most common sockets that do not require elevated privileges to perform actions on behalf of user applications.
Kernel Space Sockets
	Attempts to access hardware directly on behalf of a user application to either prevent encapsulation/decapsulation or to create packets from scratch,
		which requires elevated privileges.
APPLICATION/SOCKETS
	USER SPACE
		Using tcpdump or wireshark to read a file
		Using nmap with no switches
		Using netcat to connect to a listener
		Using netcat to create a listener above the well known port range(1024+)
		Using /dev/tcp or /dev/udp to transmit data
	KERNEL SPACE
		Using tcpdump or wireshark to capture packets on the wire
		Using nmap for OS identification or to set specific flags when scanning
		Using netcat to create a listener in the well known port range (0 - 1023)
		Using Scapy to craft or modify a packet for transmission
PYTHON3		
	import socket
		s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
		
		socket.socket([*family*[,*type*[*proto*]]])
			family constants should be: AF_INET (default), AF_INET6, AF_UNIX
			type constants should be: SOCK_STREAM (default), SOCK_DGRAM, SOCK_RAW
			proto constants should be: 0 (default), IPPROTO_RAW
			
========================================================================================================================================================

#!/usr/bin/env python3

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# This can also be accomplished by using s = socket.socket(), because AF_INET, and SOCK_STREAM are defaults.

ipaddr ='127.0.0.1'
port = 54321

s.connect((ipaddr, port))

# To send a string as a bytes-like objec, add the prefix b to the string. /n is used to go to the next line
s.send(b'Hello\n')

# It is recommended that the buffersize used with recvfrom is a power of 2 and not a very large number of bits
response, conn = s.recvfrom(1024)

# In order to receive a message that is ssent as bytes-like-object, you must decode into UTF-8 (default)
print(response.decode())

s.close()

========================================================================================================================================================

syntax enable
set tabstop=4
set shiftwidth=4
set expandtab
set number
filetype indent on
set autoindent

========================================================================================================================================================
