RAW IPV4 SOCKETS
	Raw Socket scripts must include the IP header and the next headers.
	Requires guidance from the "Request for Comments" (RFC)to follow header structure properly.
		RFCs contain technical and organizational documents about the Internet, including specifications and policy documents.
	See RFC 791, Section 3 - Specification for details on how to construct an IPv4 header.
RAW SOCKET USE CASE
	Testing specific defense mechanisms - such as triggering and IDS for an effect, or filtering
	Avoiding defense mechanisms
	Obfuscating data during transfer
	Manually crafting a packet with the chosen data in header fields
	
========================================================================================================================================================

#!/usr/bin/env python3

# For building the socket
import socket

# For system level commands
import sys 

# For establishing the packet structure. This will allow direct access to the methods and functions in the struct module
from struct import *

# Create a raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''
src_ip = "10.1.0.2"
dst_ip = "10.1.0.3"

# add the IPv4 header information
ip_ver_ihl = 69     # This is putting the decimal conversion of 0x45 for version and Internet Header Length
ip_tos = 0          # This combines the DSCP and ECN fields
ip_len = 0          # The kernel will fill in the actual length of the packet
ip_id = 12345       # This sets the IP identification for the packet
ip_frag = 0         # This sets fragmentation to off
ip_ttl = 64         # This determines the TTL of the packet when leaving the machine
ip_proto = 16       # This sets up the IP protocol to 16 (CHAOS). If this was 6 (TCP) or 17 (UDP) additional headers would be required
ip_check = 0        # The kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip)        # inet_aton(string) will convert the IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)        # inet_aton(string) will convert the IP address to a 32 bit binary number

ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)

message = b'This is a message'
packet = ip_header + message

# send the packet
s.sendto(packet, (dst_ip,0))
