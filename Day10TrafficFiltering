FILTERING DEVICE, MECHANISMS, AND LAYERS

https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T1_Filtering_Devices_Mechanisms&Layer.jpg

NF_IP_PRE_ROUTING → PREROUTING

NF_IP_LOCAL_IN → INPUT

NF_IP_FORWARD → FORWARD

NF_IP_LOCAL_OUT → OUTPUT

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! NF_IP_POST_ROUTING → POSTROUTING !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

tables - contain chains

chains - contain rules

rules - dictate what to match and what actions to perform on packets when packets match a rule

EACH APPLICATION HAD SEVERAL TABLES AND CHAINS
filter - default table. Provides packet filtering.

INPUT, FORWARD, and OUTPUT

nat - used to translate private ←→ public address and ports.

PREROUTING, POSTROUTING, and OUTPUT

mangle - provides special packet alteration. Can modify various fields header fields.

All Chains: PREROUTING, POSTROUTING, INPUT, FORWARD and OUTPUT.

raw - used to configure exemptions from connection tracking.

PREROUTING and OUTPUT

security - used for Mandatory Access Control (MAC) networking rules.

INPUT, FORWARD, and OUTPUT

https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T51_iptables_options.png

sudo iptables -t [table] -A [chain] [rules] -j [action]
Rules:

-i or -o [iface]
-s or -d [ip.add | network/mask]
-p [protocol(in ipv4 header)]

-m is used with:
  state --state [state]
  mac [--mac-source | --mac-destination] [mac]
  tcp | udp [--dport | --sport] [port | port1:port2]
  multiport [--sports | --dports | --ports]
                [port1,[port2,[port3:port15]]]
  bpf --bytecode [ 'bytecode' ]

[action] - ACCEPT, REJECT, DROP

MODIFY IPTABLES
Flush table

iptables -t [table] -F
Change default policy

iptables -t [table] -P [chain] [action]
Lists rules with rule numbers

iptables -t [table] -L --line-numbers
Lists rules as commands interpreted by the system

iptables -t [table] -S
Inserts rule before Rule number

iptables -t [table] -I [chain] [rule num] [rules] -j [action]
Deletes rule at number

iptables -t [table] -D [chain] [rule num]



NFTABLE FAMILIES
ip - IPv4 packets

ip6 - IPv6 packets

inet - IPv4 and IPv6 packets

arp - layer 2

bridge - processing traffic/packets traversing bridges.

netdev - allows for user classification of packets - nftables passes up to the networking stack
(no counterpart in iptables)

There are three chain types:

filter - to filter packets - can be used with arp, bridge, ip, ip6, and inet families

route - to reroute packets - can be used with ip and ipv6 families only

nat - used for Network Address Translation - used with ip and ip6 table families only

HOOKS
https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T81_Fam_Chain_Hook.png
PREROUTING

POSTROUTING

INPUT

OUTPUT

FORWARD

INGRESS - used with NETDEV family only



1. CREATE THE TABLE
sudo nft add table [family] [table]
[family] = ip, ip6, inet, arp, bridge and netdev.

[table] = user provided name for the table.

2. CREATE THE BASE CHAIN
sudo nft add chain [family] [table] [chain] { type [type] hook [hook]
    priority [priority] \; policy [policy] \;}
[chain] = User defined name for the chain.

[type] =  can be filter, route or nat.

[hook] = prerouting, ingress, input, forward, output or
         postrouting.

[priority] = user provided integer. Lower number = higher
             priority. default = 0. Use "--" before
             negative numbers.

; [policy] ; = set policy for the chain. Can be
              accept (default) or drop.

 Use "\" to escape the ";" in bash
 
 3. CREATE A RULE IN THE CHAIN
sudo nft add rule [family] [table] [chain] [matches (matches)] [statement]
[matches] = typically protocol headers(i.e. ip, ip6, tcp,
            udp, icmp, ether, etc)

(matches) = these are specific to the [matches] field.

[statement] = action performed when packet is matched. Some
              examples are: log, accept, drop, reject,
              counter, nat (dnat, snat, masquerade)
              
nft {list | flush} ruleset
nft {delete | list | flush } table [family] [table]
nft {delete | list | flush } chain [family] [table] [chain]

MODIFY NFTABLES
nft list table [family] [table] [-a]
Adds after position

nft add rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]
Inserts before position

nft insert rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]
Replaces rule at handle

nft replace rule [family] [table] [chain] [handle <handle>] [matches (matches)] [statement]
Deletes rule at handle

nft delete rule [family] [table] [chain] [handle <handle>]
====================================================================================================================================
sudo iptables -L --line -v
  views the table
  
sudo iptables -t nat -L
  views nftable
  
sudo iptables -F
  flushes iptables
  
sudo iptables -t nat -F
  flushes nftables
  
sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
sudo iptables -A INPUT -p tcp --sport 22 -j ACCEPT
sudo iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT
sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
  explicitly opens specified port
  
sudo iptables -P INPUT DROP
  change default policy
  
sudo iptables -A INPUT -p tcp -m multiport --ports 22,6010,6011,6012 -m state --state NEW,ESTABLISHED -j ACCEPT
  allows terminator
  
sudo iptabales -D OUTPUT 2
  deletes line 2 of output
  
sudo iptables -I INPUT -s 172.16.82.106 -j DROP
sudo iptables -I OUTPUT -d 172.16.82.106 -j DROP
sudo iptables -A INPUT -s 172.16.82.112 -j ACCEPT
sudo iptables -A OUTPUT -d 172.16.82.112 -j ACCEPT


for CHAIN in INPUT OUTPUT FORWARD;do sudo iptables -P $CHAIN ACCEPT;done

sudo iptables -A INPUT -m state --state INVALID -j DROP
  Drop invalid fragments (not belonging to any connections)

sudo iptables -A INPUT -f -j DROP
  Drop fragments

sudo iptables -A INPUT -i eth0 -p tcp --syn -m limit --limit 10/second -j ACCEPT
  Throttle SYN requests

sudo nft add table ip CCTC
sudo nft list tables
sudo nft flush table ip CCTC
sudo nft delete table ip CCTC
sudo nft add chain ip CCTC input { type filter hook input priority 0 \; policy accept \; }
sudo nft add chain ip CCTC output { type filter hook output priority 0\; policy accept \; }
sudo nft insert rule ip CCTC input tcp dport 22 accept
sudo nft list ruleset
sudo nft list chain ip CCTC output -ann
sudo nft list ruleset -ann
sudo nft add rule ip CCTC input position 4 ip saddr 172.16.82.112 drop
sudo nft delete rule ip CCTC input handle 19



sudo nft add rule ip CCTC input CT sate invalide drop
  Drop INVALID packetssudo nft delete rule ip CCTC input handle 19
 
sudo nft add rule ip CCTC input ip frag-off != 0 drop
  Drop fragmented packets
  
sudo nft add rule ip CCTC input tcp flags sy limit rate 10/second accept
  Limit (throttle) SYN request to prevent SYN floods
  
sudo nft list ruleset > nft.conf
